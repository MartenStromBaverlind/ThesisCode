class Solution {
public:
ListNode* rotateRight(ListNode* head, int k) {
     
    if(head==nullptr) return nullptr;
    if(head->next==nullptr) return head;
    vector<ListNode*> v;
    ListNode* temp=head;

    while(temp){
        v.push_back(temp);
        temp=temp->next;
    }
    int n=v.size();
    int indx = n - k % n;

    if(indx==n) return head;
    else{
        v[n-1]->next = head;
        v[indx-1]->next = nullptr;
        head=v[indx];
        return head;
    }
}};

int main() {
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(4);
    head->next->next->next->next = new ListNode(5);

    Solution sol;
    ListNode* result = sol.rotateRight(head, 2);

    ListNode* temp = result;
    while(temp) {
        cout << temp->val << " ";
        temp = temp->next;
    }
    
    return 0;
}